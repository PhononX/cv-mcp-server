/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Carbon Voice Simplified API
 * # Introduction

The simplified version of the Carbon Voice API is designed to enhance usability for third-party clients looking to 
seamlessly integrate with our application. By streamlining authentication methods, providing clear error handling guidelines, 
and implementing straightforward rate limiting policies, we ensure that developers can quickly and efficiently connect to our services. 
This user-friendly approach minimizes complexity, making it easier for external applications to leverage the powerful communication 
features of Carbon Voice without extensive technical overhead.

This API is designed for people who feel comfortable integrating with RESTful APIs.

## Full API Version
We also have a full version of the API. You can find it [here](/docs).

## Terminology
 
* **Workspace**: An area that groups together people and Conversations.
* **Conversation**: A channel of communication. A grouping of people and messages related to a given topic.
* **Collaborators**: A group of people who are part of a Conversation.
* **Discussion**: Any post into a conversation
* **CarbonLink**: A link (on a website, QR code, or phone call) to start a conversation.

## BaseURL

This API is served over HTTPS.

All URLs referenced in the documentation have the following base: https://api.carbonvoice.app/api/simplified.

## Authentication

There are three ways to authenticate with this API:

* with an OAuth2 Access Token in the Authorization request header field 
(which uses the Bearer authentication scheme to transmit the Access Token)
* with your Client ID and Client Secret credentials
* with a PXToken

Each endpoint supports only one option.

<SecurityDefinitions />

## Errors

When an error occurs, you will receive an error object. Most of these error objects 
contain an error code and an error description so that your applications can more 
efficiently identify the problem.

If you get an 4xx HTTP response code, then you can assume that there is a bad request
from your end. In this case, check the [Error Responses section](#section/Introduction/Error-Responses) for more context.

5xx errors suggest a problem on our end, so in this case, check [Carbon Voice's Status](https://status.carbonvoice.app)
 to see how our systems are doing.

In any other case you can use our support options.

## Error Responses

`{ "success": false, requestId: "uuid", errmsg: "error message"`

## Rate-Limiting 

This API is subject to rate limiting. The limits differ per endpoint.

If you exceed the provided rate limit for a given endpoint, you will receive the 429
Too Many Requests response with the following message: Too many requests. Check the
X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers.

For details on rate limiting, refer to Rate Limit Policy.

## Support

If you have problems or need help with your case, you can always reach out to our Support.

 * OpenAPI spec version: 1.0.0
 */
import type {
  AIPrompt,
  AIPromptControllerGetPromptsParams,
  AIPromptWithMessagesResponse,
  AIResponse,
  AIResponseControllerGetAllResponsesParams,
  AIShareLinkResponse,
  AddAttachmentsResponse,
  AddLinkAttachmentPayload,
  AddMessageToFolderPayload,
  AllConversationsResponse,
  App,
  CreateAIPrompt,
  CreateAIResponse,
  CreateConversationMessage,
  CreateFolderPayload,
  CreateShareLinkAIResponse,
  Folder,
  FolderWithMessages,
  GetAllRootFoldersParams,
  GetByIdParams,
  GetCountsGroupedByWorkspaceParams,
  GetMessageByIdParams,
  GetMessageResponse,
  GetTenRecentAIPromptResponse,
  GetTenRecentMessagesResponse,
  GetTenRecentMessagesResponseParams,
  Language,
  ListCountFoldersGroupedByWorkspace,
  ListFoldersResponse,
  ListMessagesParams,
  ListMessagesResponse,
  MessageV2,
  MoveFolderPayload,
  SearchUserParams,
  SendDirectMessage,
  SimplifiedAIPrompt,
  SubscribeUserPayload,
  SubscribedUser,
  UpdateFolderNamePayload,
  User,
  WorkspaceBasicInfo,
} from './zod-schemas';

import { mutator } from '../utils/axios-instance';
export const aIPromptControllerGetPrompts = (
  params?: AIPromptControllerGetPromptsParams,
) => {
  return mutator<AIPrompt[]>({ url: `/prompts`, method: 'GET', params });
};

export const aIPromptControllerCreatePrompt = (
  createAIPrompt: CreateAIPrompt,
) => {
  return mutator<AIPrompt>({
    url: `/prompts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createAIPrompt,
  });
};

export const aIPromptControllerDeletePrompt = (id: string) => {
  return mutator<boolean>({ url: `/prompts/${id}`, method: 'DELETE' });
};

export const aIResponseControllerGetAllResponses = (
  params?: AIResponseControllerGetAllResponsesParams,
) => {
  return mutator<AIResponse[]>({ url: `/responses`, method: 'GET', params });
};

export const aIResponseControllerCreateResponse = (
  createAIResponse: CreateAIResponse,
) => {
  return mutator<AIResponse>({
    url: `/responses`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createAIResponse,
  });
};

export const aIResponseControllerGetLatestTenAIResponseByPrompt = (
  promptId: string,
) => {
  return mutator<GetTenRecentAIPromptResponse>({
    url: `/responses/prompt/${promptId}/latest-ten`,
    method: 'GET',
  });
};

/**
 * @summary Generate AI Prompt Response by share-link-ids
 */
export const createShareLinkAIResponse = (
  createShareLinkAIResponse: CreateShareLinkAIResponse,
) => {
  return mutator<AIShareLinkResponse>({
    url: `/responses/share-link`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createShareLinkAIResponse,
  });
};

export const aIResponseControllerDeletePrompt = (id: string) => {
  return mutator<boolean>({ url: `/responses/${id}`, method: 'DELETE' });
};

/**
 * Apps that the user has access to (subscribed or not). If the user is the owner of the app, details will be returned with the private fields.
 * @summary Get List of My Apps
 */
export const getMyApps = () => {
  return mutator<App[]>({ url: `/apps`, method: 'GET' });
};

/**
 * @summary Subscribe user into app
 */
export const subscribeUserIntoApp = (
  clientId: string,
  subscribeUserPayload: SubscribeUserPayload,
) => {
  return mutator<SubscribedUser>({
    url: `/apps/${clientId}/subscribe`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: subscribeUserPayload,
  });
};

/**
 * @summary Unsubscribe user from app
 */
export const unsubscribeUserFromApp = (clientId: string) => {
  return mutator<void>({
    url: `/apps/${clientId}/unsubscribe`,
    method: 'DELETE',
  });
};

export const languageControllerGetAll = () => {
  return mutator<Language[]>({ url: `/languages/all`, method: 'GET' });
};

/**
 * @summary Get last ten recent Messages including (Conversation, Creator, Labels)
 */
export const getTenRecentMessagesResponse = (
  params?: GetTenRecentMessagesResponseParams,
) => {
  return mutator<GetTenRecentMessagesResponse>({
    url: `/simplified/messages/latest-ten`,
    method: 'GET',
    params,
  });
};

/**
 * @summary Get Message By ID
 */
export const getMessageById = (id: string, params?: GetMessageByIdParams) => {
  return mutator<GetMessageResponse>({
    url: `/simplified/messages/${id}`,
    method: 'GET',
    params,
  });
};

/**
 * By default return messages created in last 5 days.

The **maximum** allowed range between dates is **30 days**.
 * @summary List Messages
 */
export const listMessages = (params?: ListMessagesParams) => {
  return mutator<ListMessagesResponse>({
    url: `/simplified/messages`,
    method: 'GET',
    params,
  });
};

/**
 * Max number of links is **100** per API call. If you want to add more, should make another api call.
 * @summary Add Link Attachments to a message
 */
export const addLinkAttachmentsToMessage = (
  id: string,
  addLinkAttachmentPayload: AddLinkAttachmentPayload,
) => {
  return mutator<AddAttachmentsResponse>({
    url: `/simplified/messages/${id}/attachments/bulk/link`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: addLinkAttachmentPayload,
  });
};

/**
 * In order to create a Message, you must provide **transcript** or **link** attachments.
 * @summary Send a Message to a Conversation
 */
export const createConversationMessage = (
  id: string,
  createConversationMessage: CreateConversationMessage,
) => {
  return mutator<GetMessageResponse>({
    url: `/simplified/messages/conversation/${id}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createConversationMessage,
  });
};

/**
 * In order to create a Message, you must provide **transcript** or **link** attachments.
 * @summary Send a Direct Message to a User or a Group of Users
 */
export const sendDirectMessage = (sendDirectMessage: SendDirectMessage) => {
  return mutator<GetMessageResponse>({
    url: `/simplified/messages/direct`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: sendDirectMessage,
  });
};

/**
 * It's required to inform one of (**email**, **phone**)
 * @summary Search user by email or phone
 */
export const searchUser = (params?: SearchUserParams) => {
  return mutator<User>({
    url: `/simplified/users/search`,
    method: 'GET',
    params,
  });
};

/**
 * @summary Get Folder by ID
 */
export const getById = (id: string, params?: GetByIdParams) => {
  return mutator<Folder>({
    url: `/simplified/folders/${id}`,
    method: 'GET',
    params,
  });
};

/**
 * @summary Get all user conversations (Only _id and name available
 */
export const getAllConversations = () => {
  return mutator<AllConversationsResponse>({
    url: `/simplified/conversations/all`,
    method: 'GET',
  });
};

/**
 * @summary Get all Workspaces that user has access to with basic info
 */
export const getAllWithBasicInfo = () => {
  return mutator<WorkspaceBasicInfo[]>({
    url: `/simplified/workspaces/basic-info`,
    method: 'GET',
  });
};

/**
 * @summary List of System AI Prompts
 */
export const getSystemAIPrompts = () => {
  return mutator<SimplifiedAIPrompt[]>({
    url: `/simplified/public/system-prompts`,
    method: 'GET',
  });
};

/**
 * @summary Get Sample AI Responses for a System AI Prompt
 */
export const getAiSystemPromptResponse = (promptId: string) => {
  return mutator<AIPromptWithMessagesResponse>({
    url: `/simplified/public/responses/prompt/${promptId}/sample`,
    method: 'GET',
  });
};

/**
 * @summary Get all root Folders
 */
export const getAllRootFolders = (params: GetAllRootFoldersParams) => {
  return mutator<ListFoldersResponse>({
    url: `/simplified/folders`,
    method: 'GET',
    params,
  });
};

/**
 * @summary Create a new Folder
 */
export const createFolder = (createFolderPayload: CreateFolderPayload) => {
  return mutator<Folder>({
    url: `/simplified/folders`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createFolderPayload,
  });
};

/**
 * @summary Get count of all folders, messages and message_ids not in folders grouped by workspace
 */
export const getCountsGroupedByWorkspace = (
  params: GetCountsGroupedByWorkspaceParams,
) => {
  return mutator<ListCountFoldersGroupedByWorkspace[]>({
    url: `/simplified/folders/count-by-workspace`,
    method: 'GET',
    params,
  });
};

/**
 * @summary Get Folder with Messages
 */
export const getFolderMessages = (id: string) => {
  return mutator<FolderWithMessages>({
    url: `/simplified/folders/${id}/messages`,
    method: 'GET',
  });
};

/**
 * @summary Update Folder Name
 */
export const updateFolderName = (
  id: string,
  updateFolderNamePayload: UpdateFolderNamePayload,
) => {
  return mutator<Folder>({
    url: `/simplified/folders/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateFolderNamePayload,
  });
};

/**
 * @summary Delete Folder and all subfolders and messages in nested folders
 */
export const deleteFolder = (id: string) => {
  return mutator<void>({ url: `/simplified/folders/${id}`, method: 'DELETE' });
};

/**
 * Only allowed to move messages of type: voicememo,prerecorded.
 * @summary Move a message into specific Folder or into a Workspace
 */
export const addMessageToFolderOrWorkspace = (
  addMessageToFolderPayload: AddMessageToFolderPayload,
) => {
  return mutator<MessageV2>({
    url: `/simplified/folders/message`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: addMessageToFolderPayload,
  });
};

/**
 * @summary Move a Folder into another Folder or into a Workspace
 */
export const moveFolder = (
  id: string,
  moveFolderPayload: MoveFolderPayload,
) => {
  return mutator<Folder>({
    url: `/simplified/folders/${id}/move`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: moveFolderPayload,
  });
};

export type AIPromptControllerGetPromptsResult = NonNullable<
  Awaited<ReturnType<typeof aIPromptControllerGetPrompts>>
>;
export type AIPromptControllerCreatePromptResult = NonNullable<
  Awaited<ReturnType<typeof aIPromptControllerCreatePrompt>>
>;
export type AIPromptControllerDeletePromptResult = NonNullable<
  Awaited<ReturnType<typeof aIPromptControllerDeletePrompt>>
>;
export type AIResponseControllerGetAllResponsesResult = NonNullable<
  Awaited<ReturnType<typeof aIResponseControllerGetAllResponses>>
>;
export type AIResponseControllerCreateResponseResult = NonNullable<
  Awaited<ReturnType<typeof aIResponseControllerCreateResponse>>
>;
export type AIResponseControllerGetLatestTenAIResponseByPromptResult =
  NonNullable<
    Awaited<
      ReturnType<typeof aIResponseControllerGetLatestTenAIResponseByPrompt>
    >
  >;
export type CreateShareLinkAIResponseResult = NonNullable<
  Awaited<ReturnType<typeof createShareLinkAIResponse>>
>;
export type AIResponseControllerDeletePromptResult = NonNullable<
  Awaited<ReturnType<typeof aIResponseControllerDeletePrompt>>
>;
export type GetMyAppsResult = NonNullable<
  Awaited<ReturnType<typeof getMyApps>>
>;
export type SubscribeUserIntoAppResult = NonNullable<
  Awaited<ReturnType<typeof subscribeUserIntoApp>>
>;
export type UnsubscribeUserFromAppResult = NonNullable<
  Awaited<ReturnType<typeof unsubscribeUserFromApp>>
>;
export type LanguageControllerGetAllResult = NonNullable<
  Awaited<ReturnType<typeof languageControllerGetAll>>
>;
export type GetTenRecentMessagesResponseResult = NonNullable<
  Awaited<ReturnType<typeof getTenRecentMessagesResponse>>
>;
export type GetMessageByIdResult = NonNullable<
  Awaited<ReturnType<typeof getMessageById>>
>;
export type ListMessagesResult = NonNullable<
  Awaited<ReturnType<typeof listMessages>>
>;
export type AddLinkAttachmentsToMessageResult = NonNullable<
  Awaited<ReturnType<typeof addLinkAttachmentsToMessage>>
>;
export type CreateConversationMessageResult = NonNullable<
  Awaited<ReturnType<typeof createConversationMessage>>
>;
export type SendDirectMessageResult = NonNullable<
  Awaited<ReturnType<typeof sendDirectMessage>>
>;
export type SearchUserResult = NonNullable<
  Awaited<ReturnType<typeof searchUser>>
>;
export type GetByIdResult = NonNullable<Awaited<ReturnType<typeof getById>>>;
export type GetAllConversationsResult = NonNullable<
  Awaited<ReturnType<typeof getAllConversations>>
>;
export type GetAllWithBasicInfoResult = NonNullable<
  Awaited<ReturnType<typeof getAllWithBasicInfo>>
>;
export type GetSystemAIPromptsResult = NonNullable<
  Awaited<ReturnType<typeof getSystemAIPrompts>>
>;
export type GetAiSystemPromptResponseResult = NonNullable<
  Awaited<ReturnType<typeof getAiSystemPromptResponse>>
>;
export type GetAllRootFoldersResult = NonNullable<
  Awaited<ReturnType<typeof getAllRootFolders>>
>;
export type CreateFolderResult = NonNullable<
  Awaited<ReturnType<typeof createFolder>>
>;
export type GetCountsGroupedByWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof getCountsGroupedByWorkspace>>
>;
export type GetFolderMessagesResult = NonNullable<
  Awaited<ReturnType<typeof getFolderMessages>>
>;
export type UpdateFolderNameResult = NonNullable<
  Awaited<ReturnType<typeof updateFolderName>>
>;
export type DeleteFolderResult = NonNullable<
  Awaited<ReturnType<typeof deleteFolder>>
>;
export type AddMessageToFolderOrWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof addMessageToFolderOrWorkspace>>
>;
export type MoveFolderResult = NonNullable<
  Awaited<ReturnType<typeof moveFolder>>
>;
