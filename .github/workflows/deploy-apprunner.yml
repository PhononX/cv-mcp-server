# .github/workflows/deploy-apprunner.yml
name: Deploy to App Runner

on:
  push:
    branches: [main, develop]

env:
  AWS_REGION: us-east-2

jobs:
  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set deployment variables
        id: set-vars
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "service_arn=arn:aws:apprunner:us-east-2:336746746018:service/cv-mcp-server/XXXXXXX" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "branch=develop" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "service_arn=arn:aws:apprunner:us-east-2:336746746018:service/cv-mcp-server/5c92ddf00a544c9dbc6d0ca758d53d68" >> $GITHUB_OUTPUT
          else
            echo "❌ Unsupported branch: ${{ github.ref }}"
            exit 1
          fi

          echo "🚀 Deploying branch: ${{ steps.set-vars.outputs.branch }}"
          echo "🌍 Environment: ${{ steps.set-vars.outputs.environment }}"
          echo "🔗 Service ARN: ${{ steps.set-vars.outputs.service_arn }}"

      - name: Update App Runner ENVIRONMENT variable
        run: |
          echo "📥 Fetching current App Runner service config..."
          aws apprunner describe-service \
            --service-arn ${{ steps.set-vars.outputs.service_arn }} \
            > service.json

          echo "🧪 Extracting fields from service.json..."

          REPO_URL=$(jq -r '.Service.SourceConfiguration.CodeRepository.RepositoryUrl' service.json)
          BRANCH=$(jq -r '.Service.SourceConfiguration.CodeRepository.SourceCodeVersion.Value' service.json)
          CONFIG_SOURCE=$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.ConfigurationSource' service.json)
          RUNTIME=$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.CodeConfigurationValues.Runtime' service.json)
          START_CMD=$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.CodeConfigurationValues.StartCommand // empty' service.json)
          BUILD_CMD=$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.CodeConfigurationValues.BuildCommand // empty' service.json)

          echo "📄 REPO_URL=$REPO_URL"
          echo "🌿 BRANCH=$BRANCH"
          echo "⚙️ CONFIG_SOURCE=$CONFIG_SOURCE"
          echo "🚀 RUNTIME=$RUNTIME"
          echo "▶️ START_CMD=$START_CMD"
          echo "🔧 BUILD_CMD=$BUILD_CMD"

          # Build JSON payload manually for better control
          if [ "$CONFIG_SOURCE" = "REPOSITORY" ]; then
            cat > update.json <<EOF
          {
            "ServiceArn": "${{ steps.set-vars.outputs.service_arn }}",
            "SourceConfiguration": {
              "CodeRepository": {
                "RepositoryUrl": "$REPO_URL",
                "SourceCodeVersion": {
                  "Type": "BRANCH",
                  "Value": "$BRANCH"
                },
                "CodeConfiguration": {
                  "ConfigurationSource": "REPOSITORY"
                }
              },
              "AutoDeploymentsEnabled": true
            },
            "InstanceConfiguration": {
              "EnvironmentVariables": [
                {
                  "Name": "ENVIRONMENT",
                  "Value": "${{ steps.set-vars.outputs.environment }}"
                }
              ]
            }
          }
          EOF
          else
            # For MANAGED config, include values like Runtime, StartCommand, BuildCommand
            cat > update.json <<EOF
          {
            "ServiceArn": "${{ steps.set-vars.outputs.service_arn }}",
            "SourceConfiguration": {
              "CodeRepository": {
                "RepositoryUrl": "$REPO_URL",
                "SourceCodeVersion": {
                  "Type": "BRANCH",
                  "Value": "$BRANCH"
                },
                "CodeConfiguration": {
                  "ConfigurationSource": "$CONFIG_SOURCE",
                  "CodeConfigurationValues": {
                    "Runtime": "$RUNTIME"
                    $( [ -n "$BUILD_CMD" ] && echo ", \"BuildCommand\": \"$BUILD_CMD\"" )
                    $( [ -n "$START_CMD" ] && echo ", \"StartCommand\": \"$START_CMD\"" )
                  }
                }
              },
              "AutoDeploymentsEnabled": true
            },
            "InstanceConfiguration": {
              "EnvironmentVariables": [
                {
                  "Name": "ENVIRONMENT",
                  "Value": "${{ steps.set-vars.outputs.environment }}"
                }
              ]
            }
          }
          EOF
          fi

          echo "✅ update.json generated:"
          cat update.json
          echo "📤 Updating service with ENVIRONMENT=${{ steps.set-vars.outputs.environment }}..."
          aws apprunner update-service --cli-input-json file://update.json

      - name: Trigger App Runner deployment
        run: |
          echo "🚀 Triggering App Runner deployment..."
          aws apprunner start-deployment --service-arn ${{ steps.set-vars.outputs.service_arn }}

          echo "⏳ Waiting for deployment to start..."
          sleep 30

          # Monitor deployment status
          for i in {1..20}; do
            STATUS=$(aws apprunner list-operations \
              --service-arn ${{ steps.set-vars.outputs.service_arn }} \
              --query 'OperationSummaryList[0].Status' \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "✅ Deployment succeeded!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "❌ Deployment failed!"
              exit 1
            fi
            
            sleep 30
          done

      - name: Get service URL
        run: |
          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn ${{ steps.set-vars.outputs.service_arn }} \
            --query 'Service.ServiceUrl' \
            --output text)

          echo "🌐 Service URL: https://$SERVICE_URL"
          echo "🏷️ Branch: ${{ steps.set-vars.outputs.branch }}"
          echo "🌍 Environment: ${{ steps.set-vars.outputs.environment }}"

          # Test health endpoint
          curl -f "https://$SERVICE_URL/health" || echo "⚠️ Health check failed"
