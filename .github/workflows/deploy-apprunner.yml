# .github/workflows/deploy-apprunner.yml
name: Deploy to App Runner

on:
  push:
    branches: [main, develop]

env:
  AWS_REGION: us-east-2

jobs:
  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set variables (branch, environment, service ARN)
        id: set-vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" = "main" ]; then
            ENVIRONMENT="prod"
          else
            ENVIRONMENT="dev"
          fi

          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='cv-mcp-server'].ServiceArn" \
            --output text)

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "service_arn=$SERVICE_ARN" >> $GITHUB_OUTPUT

          echo "🚀 Deploying branch: $BRANCH"
          echo "🌍 Environment: $ENVIRONMENT"
          echo "🔗 Service ARN: $SERVICE_ARN"

      - name: Replace ENVIRONMENT in apprunner.yaml
        run: |
          echo "🔧 Setting ENVIRONMENT=${{ steps.set-vars.outputs.environment }}"
          ENV_VALUE="${{ steps.set-vars.outputs.environment }}"

          # Replace the ENVIRONMENT value in apprunner.yaml (handles both dev and prod)
          sed -i.bak "s/value: '[^']*' #dev or prod/value: '$ENV_VALUE' #dev or prod/" apprunner.yaml

          echo "✅ Updated apprunner.yaml:"
          cat apprunner.yaml

          # Verify the change
          echo "🔍 Verifying ENVIRONMENT value:"
          grep -A1 "- name: ENVIRONMENT" apprunner.yaml

      - name: Trigger App Runner deployment
        run: |
          echo "🚀 Triggering App Runner deployment..."
          aws apprunner start-deployment --service-arn ${{ steps.set-vars.outputs.service_arn }}

          echo "⏳ Waiting for deployment to start..."
          sleep 30

          # Monitor deployment status
          for i in {1..20}; do
            STATUS=$(aws apprunner list-operations \
              --service-arn ${{ steps.set-vars.outputs.service_arn }} \
              --query 'OperationSummaryList[0].Status' \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "✅ Deployment succeeded!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "❌ Deployment failed!"
              exit 1
            fi
            
            sleep 30
          done

      - name: Get service URL
        run: |
          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn ${{ steps.set-vars.outputs.service_arn }} \
            --query 'Service.ServiceUrl' \
            --output text)

          echo "🌐 Service URL: https://$SERVICE_URL"
          echo "🏷️ Branch: ${{ steps.set-vars.outputs.branch }}"
          echo "🌍 Environment: ${{ steps.set-vars.outputs.environment }}"

          # Test health endpoint
          curl -f "https://$SERVICE_URL/health" || echo "⚠️ Health check failed"
