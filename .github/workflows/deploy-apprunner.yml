# .github/workflows/deploy-apprunner.yml
name: Deploy to App Runner

on:
  push:
    branches: [main, develop]

env:
  AWS_REGION: us-east-2

jobs:
  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set deployment variables
        id: set-vars
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "service_arn=arn:aws:apprunner:us-east-2:336746746018:service/cv-mcp-server/XXXXXXX" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "branch=develop" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "service_arn=arn:aws:apprunner:us-east-2:336746746018:service/cv-mcp-server/5c92ddf00a544c9dbc6d0ca758d53d68" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Unsupported branch: ${{ github.ref }}"
            exit 1
          fi

          echo "üöÄ Deploying branch: ${{ steps.set-vars.outputs.branch }}"
          echo "üåç Environment: ${{ steps.set-vars.outputs.environment }}"
          echo "üîó Service ARN: ${{ steps.set-vars.outputs.service_arn }}"

      - name: Update App Runner ENVIRONMENT variable
        run: |
          echo "üì• Fetching current App Runner service config..."
          aws apprunner describe-service \
            --service-arn ${{ steps.set-vars.outputs.service_arn }} \
            > service.json

          echo "üîß Building update payload..."

          jq -n \
            --arg arn "${{ steps.set-vars.outputs.service_arn }}" \
            --arg repoUrl "$(jq -r '.Service.SourceConfiguration.CodeRepository.RepositoryUrl' service.json)" \
            --arg branch "$(jq -r '.Service.SourceConfiguration.CodeRepository.SourceCodeVersion.Value' service.json)" \
            --arg configName "$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.ConfigurationSource' service.json)" \
            --arg runtime "$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.CodeConfigurationValues.Runtime' service.json)" \
            --arg startCommand "$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.CodeConfigurationValues.StartCommand // empty' service.json)" \
            --arg buildCommand "$(jq -r '.Service.SourceConfiguration.CodeRepository.CodeConfiguration.CodeConfigurationValues.BuildCommand // empty' service.json)" \
            --arg envName "ENVIRONMENT" \
            --arg envValue "${{ steps.set-vars.outputs.environment }}" \
            '{
              ServiceArn: $arn,
              SourceConfiguration: {
                CodeRepository: {
                  RepositoryUrl: $repoUrl,
                  SourceCodeVersion: {
                    Type: "BRANCH",
                    Value: $branch
                  },
                  CodeConfiguration: {
                    ConfigurationSource: $configName,
                    CodeConfigurationValues: {
                      Runtime: $runtime,
                      StartCommand: ($startCommand | select(. != "")),
                      BuildCommand: ($buildCommand | select(. != ""))
                    }
                  }
                },
                AutoDeploymentsEnabled: true
              },
              InstanceConfiguration: {
                EnvironmentVariables: [
                  { Name: $envName, Value: $envValue }
                ]
              }
            }' > update.json

          echo "üì§ Updating service with ENVIRONMENT=${{ steps.set-vars.outputs.environment }}..."
          aws apprunner update-service --cli-input-json file://update.json

      - name: Trigger App Runner deployment
        run: |
          echo "üöÄ Triggering App Runner deployment..."
          aws apprunner start-deployment --service-arn ${{ steps.set-vars.outputs.service_arn }}

          echo "‚è≥ Waiting for deployment to start..."
          sleep 30

          # Monitor deployment status
          for i in {1..20}; do
            STATUS=$(aws apprunner list-operations \
              --service-arn ${{ steps.set-vars.outputs.service_arn }} \
              --query 'OperationSummaryList[0].Status' \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "‚úÖ Deployment succeeded!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "‚ùå Deployment failed!"
              exit 1
            fi
            
            sleep 30
          done

      - name: Get service URL
        run: |
          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn ${{ steps.set-vars.outputs.service_arn }} \
            --query 'Service.ServiceUrl' \
            --output text)

          echo "üåê Service URL: https://$SERVICE_URL"
          echo "üè∑Ô∏è Branch: ${{ steps.set-vars.outputs.branch }}"
          echo "üåç Environment: ${{ steps.set-vars.outputs.environment }}"

          # Test health endpoint
          curl -f "https://$SERVICE_URL/health" || echo "‚ö†Ô∏è Health check failed"
